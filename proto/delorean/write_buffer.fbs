namespace write_buffer;

table WriteBufferBatch {
  entries: [WriteBufferEntry];
}

table WriteBufferEntry {
  partition_open: PartitionOpen;
  partition_snapshot_started: PartitionSnapshotStarted;
  partttion_snapshot_finished: PartitionSnapshotFinished;
  dictionary_add: DictionaryAdd;
  schema_append: SchemaAppend;
  write: Row;
  delete: WriteBufferDelete;
}

table PartitionOpen {
  id: uint32;
  name: string;
}

table PartitionSnapshotStarted {
  id: uint32;
}

table PartitionSnapshotFinished {
  id: uint32;
}

table DictionaryAdd {
  partition_id: uint32;
  id: uint32;
  value: string;
}

table SchemaAppend {
  partition_id: uint32;
  measurement_id: uint32;
  columns: [Column];
}

enum ColumnType : byte { I64, U64, F64, String, Bool }

struct Column {
  column_id: uint32;
  type: ColumnType;
}

table Row {
  partition_id: uint32;
  measurement_id: uint32;
  values: [Value];
}

union PointValue {
  I64Value,
  U64Value,
  F64Value,
  BoolValue,
  StringValue
}

table Value {
  column_index: uint16;
  value: PointValue;
}

table I64Value {
  value: int64;
}

table U64Value {
  value: uint64;
}

table F64Value {
  value: float64;
}

table BoolValue {
  value: bool;
}

table StringValue {
  value: string;
}

table Delete {
  table_name: string;
  predicate: string;
}
