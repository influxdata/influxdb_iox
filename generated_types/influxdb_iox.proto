// This file defines a InfluxDB IOx specific gRPC service
// which provides functionality specific to IOx.
//
// Note this is only partially implemented in the code

syntax = "proto3";
package influxdata.platform.storage;

// TODO: how should requests handle authentication & authorization?

message CreateBucketRequest {
    uint64 org_id = 1;
    Bucket bucket = 2;
}

message CreateBucketResponse {
}

message DeleteBucketResponse {
}

message DeleteBucketRequest {
    uint32 id = 1;
}

message GetBucketsResponse {
    repeated Bucket buckets = 1;
}

message Organization {
    uint64 id = 1;
    string name = 2;
    repeated Bucket buckets = 3;
}

message Bucket {
    uint64 org_id = 1;
    uint64 id = 2;
    string name = 3;
    string retention = 4;
    // posting_list_rollover specifies how many series can be in a single posting list entry
    // before the index creates a new entry for it. For example if you have _measurement=cpu and
    // a rollover of 10, once 10 series are in that list, a new key/value pair is created in the
    // index for the next list. So you'd have _measurement=cpu<big endian 0> and _measurement=cpu<big endian 10>
    uint32 posting_list_rollover = 5;
    repeated IndexLevel index_levels = 6;
}

message IndexLevel {
    // duration is the amount of time this level represents. A duration of 0 is a level for an index of anything ever seen
    uint32 duration_seconds = 1;
    // timezone is the timezone under which this level should rollover. Only applicable for durations of 1 day or greater
    string timezone = 2;
}

// Send a message that will generate an internal error (used for testing)
message TestErrorRequest {
}

message TestErrorResponse {
}


service IOx {
    rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {}
    rpc DeleteBucket(DeleteBucketRequest) returns (DeleteBucketResponse) {}
    rpc GetBuckets(Organization) returns (GetBucketsResponse) {}
    rpc TestError(TestErrorRequest) returns (TestErrorResponse) {}
}
