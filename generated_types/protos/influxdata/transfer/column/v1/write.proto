syntax = "proto3";

package influxdata.transfer.column.v1;

option go_package = "github.com/jacobmarble/write/writeproto";

// These messages are based on the IOx internal write flatbuffer format.
// https://github.com/influxdata/influxdb_iox/blob/10f89a3e8dbca6bb6a71865a4480e622ba5ac8b0/entry/src/entry.fbs#L58-L123

message DatabaseBatch {
  string database_name = 1;

  // Table data. Data for a given table may appear in multiple table batches.
  repeated TableBatch table_batches = 2;
}

message TableBatch {
  string table_name = 1;

  // Data are represented here.
  repeated Column columns = 2;

  // Length of all columns in this table batch.
  uint32 row_count = 3;
}

message Column {
  string column_name = 1;

  // Semantic meaning behind the column data.
  enum SemanticType {
    // No semantic type (value types: i64, f64, u64, string, bool, bytes)
    SEMANTIC_TYPE_IOX = 0;
    // InfluxDB/TSM tag (value type string only)
    SEMANTIC_TYPE_TAG = 1;
    // InfluxDB/TSM field (value types: i64, f64, u64, string, bool)
    SEMANTIC_TYPE_FIELD = 2;
    // Timestamps, which must have value type i64
    SEMANTIC_TYPE_TIME = 3;
  }
  SemanticType semantic_type = 2;

  // The set of non-null values for this column. Their position in this array
  // does not map to their row position in the batch. The null_mask bitmask
  // must be used to map the row position to the position in this array.
  //
  // For example, a column with values (1,null,3) is stored as:
  //   values: (1,3)
  //   null_mask: 010
  message Values {
    repeated int64 i64_values = 1;
    repeated double f64_values = 2;
    repeated uint64 u64_values = 3;
    repeated string string_values = 4;
    repeated bool bool_values = 5;
    repeated bytes bytes_values = 6;
  }
  Values values = 3;

  // Mask that maps the position to if that value is null. Null positions will
  // not have a value represented in the values array. To read the values out
  // of the column requires traversing the mask to determine what position in
  // the values array that index is located in. Here's what it might look like:
  //    position:   7      0  15     8
  //         bit:   00100011  00111000
  // TODO note about endianness
  // An on bit (1) indicates that the value at that position is null. If there are
  // no null values in the column, the null_mask is omitted from the flatbuffers.
  // TODO test repeated bool instead of this
  bytes null_mask = 4;
}

service WriteService {
  rpc Write (WriteRequest) returns (WriteResponse);
}

message WriteRequest {
  DatabaseBatch database_batch = 1;
}

message WriteResponse {
}
