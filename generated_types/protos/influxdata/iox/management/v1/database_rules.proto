syntax = "proto3";
package influxdata.iox.management.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "influxdata/iox/management/v1/shard.proto";

// `PartitionTemplate` is used to compute the partition key of each row that
// gets written. It can consist of the table name, a column name and its value,
// a formatted time, or a string column and regex captures of its value. For
// columns that do not appear in the input row, a blank value is output.
//
// The key is constructed in order of the template parts; thus ordering changes
// what partition key is generated.
message PartitionTemplate {
  message Part {
    message ColumnFormat {
      string column = 1;
      string format = 2;
    }

    oneof part {
      google.protobuf.Empty table = 1;
      string column = 2;
      string time = 3;
      ColumnFormat regex = 4;
      ColumnFormat strf_time = 5;
    }
  }

  repeated Part parts = 1;
}

message LifecycleRules {
  // A chunk of data within a partition that has been cold for writes for this
  // many seconds will be frozen and compacted (moved to the read buffer)
  // if the chunk is older than mutable_min_lifetime_seconds
  //
  // Represents the chunk transition open -> moving and closed -> moving
  uint32 mutable_linger_seconds = 1;

  // Once the total amount of buffered data in memory reaches this size start
  // dropping data from memory
  uint64 buffer_size_soft = 4;

  // Once the amount of data in memory reaches this size start
  // rejecting writes
  uint64 buffer_size_hard = 5;

  // Allow dropping data that has not been persisted to object storage
  // once the database size has exceeded the configured limits
  bool drop_non_persisted = 7;

  // Persists chunks to object storage.
  bool persist = 9;

  // Do not allow writing new data to this database
  bool immutable = 8;

  // If the background worker doesn't find any work to do it will
  // sleep for this many milliseconds before looking again
  //
  // If 0, the default backoff is used
  // See server::db::lifecycle::DEFAULT_LIFECYCLE_BACKOFF
  uint64 worker_backoff_millis = 10;

  // After how many transactions should IOx write a new checkpoint?
  //
  // If 0 / absent, this default to 100.
  uint64 catalog_transactions_until_checkpoint = 11;

  // The average timestamp skew across concurrent writers
  uint32 late_arrive_window_seconds = 12;

  // Maximum number of rows before triggering persistence
  uint64 persist_row_threshold = 13;

  // Maximum age of a write before triggering persistence
  uint32 persist_age_threshold_seconds = 14;
}

message DatabaseRules {
  // The unencoded name of the database
  string name = 1;

  // Template that generates a partition key for each row inserted into the database
  PartitionTemplate partition_template = 2;

  // Configures how data flows through the system
  LifecycleRules lifecycle_rules = 3;

  oneof routing_rules {
    // Shard config
    ShardConfig shard_config = 8;

    // Routing config
    RoutingConfig routing_config = 9;
  }

  // Duration for which the cleanup loop should sleep on average.
  // Defaults to 500 seconds.
  google.protobuf.Duration worker_cleanup_avg_sleep = 10;

  // Optionally, the address of the write buffer for writing or reading/restoring data
  oneof write_buffer_connection {
    string writing = 11;
    string reading = 12;
  }
}

message RoutingConfig {
  NodeGroup target = 1;
}
