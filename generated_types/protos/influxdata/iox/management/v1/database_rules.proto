syntax = "proto3";
package influxdata.iox.management.v1;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "influxdata/iox/management/v1/base_types.proto";
import "influxdata/iox/management/v1/shard.proto";

// `PartitionTemplate` is used to compute the partition key of each row that
// gets written. It can consist of the table name, a column name and its value,
// a formatted time, or a string column and regex captures of its value. For
// columns that do not appear in the input row, a blank value is output.
//
// The key is constructed in order of the template parts; thus ordering changes
// what partition key is generated.
message PartitionTemplate {
  message Part {
    message ColumnFormat {
      string column = 1;
      string format = 2;
    }

    oneof part {
      google.protobuf.Empty table = 1;
      string column = 2;
      string time = 3;
      ColumnFormat regex = 4;
      ColumnFormat strf_time = 5;
    }
  }

  repeated Part parts = 1;
}

message WalBufferConfig {
  enum Rollover {
    ROLLOVER_UNSPECIFIED = 0;

    // Drop the old segment even though it hasn't been persisted. This part of
    // the WAL will be lost on this server.
    ROLLOVER_DROP_OLD_SEGMENT = 1;

    // Drop the incoming write and fail silently. This favors making sure that
    // older WAL data will be backed up.
    ROLLOVER_DROP_INCOMING = 2;

    // Reject the incoming write and return an error. The client may retry the
    // request, which will succeed once the oldest segment has been
    // persisted to object storage.
    ROLLOVER_RETURN_ERROR = 3;
  }

  // The size the WAL buffer should be limited to. Once the buffer gets to
  // this size it will drop old segments to remain below this size, but
  // still try to hold as much in memory as possible while remaining
  // below this threshold
  uint64 buffer_size = 1;

  // WAL segments become read-only after crossing over this size. Which means
  // that segments will always be >= this size. When old segments are
  // dropped from of memory, at least this much space will be freed from
  // the buffer.
  uint64 segment_size = 2;

  // What should happen if a write comes in that would exceed the WAL buffer
  // size and the oldest segment that could be dropped hasn't yet been
  // persisted to object storage. If the oldest segment has been
  // persisted, then it will be dropped from the buffer so that new writes
  // can be accepted. This option is only for defining the behavior of what
  // happens if that segment hasn't been persisted. If set to return an
  // error, new writes will be rejected until the oldest segment has been
  // persisted so that it can be cleared from memory. Alternatively, this
  // can be set so that old segments are dropped even if they haven't been
  // persisted. This setting is also useful for cases where persistence
  // isn't being used and this is only for in-memory buffering.
  Rollover buffer_rollover = 3;

  // If set to true, buffer segments will be written to object storage.
  bool persist_segments = 4;

  // If set, segments will be rolled over after this period of time even
  // if they haven't hit the size threshold. This allows them to be written
  // out to object storage as they must be immutable first.
  google.protobuf.Duration close_segment_after = 5;
}

message MutableBufferConfig {
  message PartitionDropOrder {
    message ColumnSort {
      string column_name = 1;
      ColumnType column_type = 2;
      Aggregate column_value = 3;
    }

    // Sort partitions by this order. Last will be dropped first.
    Order order = 1;

    // Configure sort key
    oneof sort {
      // The last time the partition received a write.
      google.protobuf.Empty last_write_time = 2;

      // When the partition was opened in the mutable buffer.
      google.protobuf.Empty created_at_time = 3;

      // A column name, its expected type, and whether to use the min or max
      // value. The ColumnType is necessary because the column can appear in
      // any number of tables and be of a different type. This specifies that
      // when sorting partitions, only columns with the given name and type
      // should be used for the purposes of determining the partition order. If a
      // partition doesn't have the given column in any way, the partition will
      // appear at the beginning of the list with a null value where all
      // partitions having null for that value will then be
      // sorted by created_at_time desc. So if none of the partitions in the
      // mutable buffer had this column with this type, then the partition
      // that was created first would appear last in the list and thus be the
      // first up to be dropped.
      ColumnSort column = 4;
    }
  }
  // The size the mutable buffer should be limited to. Once the buffer gets
  // to this size it will drop partitions in the given order. If unable
  // to drop partitions (because of later rules in this config) it will
  // reject writes until it is able to drop partitions.
  uint64 buffer_size = 1;

  // If set, the mutable buffer will not drop partitions that have chunks
  // that have not yet been persisted. Thus it will reject writes if it
  // is over size and is unable to drop partitions. The default is to
  // drop partitions in the sort order, regardless of whether they have
  // unpersisted chunks or not. The WAL Buffer can be used to ensure
  // persistence, but this may cause longer recovery times.
  bool reject_if_not_persisted = 2;

  // Configure order to drop partitions in
  PartitionDropOrder partition_drop_order = 3;

  // Attempt to persist partitions after they haven't received a write for
  // this number of seconds. If not set, partitions won't be
  // automatically persisted.
  uint32 persist_after_cold_seconds = 4;
}

message DatabaseRules {
  // The unencoded name of the database
  string name = 1;

  // Template that generates a partition key for each row inserted into the database
  PartitionTemplate partition_template = 2;

  // WAL configuration for this database
  WalBufferConfig wal_buffer_config = 6;

  // Mutable buffer configuration for this database
  MutableBufferConfig mutable_buffer_config = 7;

  // Shard  config
  ShardConfig shard_config = 8;
}
