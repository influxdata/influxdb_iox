syntax = "proto3";
package influxdata.iox.management.v1;

import "google/longrunning/operations.proto";
import "influxdata/iox/management/v1/database_rules.proto";

service ManagementService {
  rpc GetWriterId(GetWriterIdRequest) returns (GetWriterIdResponse);

  rpc UpdateWriterId(UpdateWriterIdRequest) returns (UpdateWriterIdResponse);

  rpc ListDatabases(ListDatabasesRequest) returns (ListDatabasesResponse);

  rpc GetDatabase(GetDatabaseRequest) returns (GetDatabaseResponse);

  rpc CreateDatabase(CreateDatabaseRequest) returns (CreateDatabaseResponse);

  // List remote IOx servers we know about.
  rpc ListRemotes(ListRemotesRequest) returns (ListRemotesResponse);

  // Update information about a remote IOx server (upsert).
  rpc UpdateRemote(UpdateRemoteRequest) returns (UpdateRemoteResponse);

  // Delete a reference to remote IOx server.
  rpc DeleteRemote(DeleteRemoteRequest) returns (DeleteRemoteResponse);

  // Creates a dummy job that for each value of the nanos field
  // spawns a task that sleeps for that number of nanoseconds before returning
  rpc CreateDummyJob(CreateDummyJobRequest) returns (CreateDummyJobResponse) {
    option (google.longrunning.operation_info) = {
      response_type: "google.protobuf.Empty"
      metadata_type: "OperationMetadata"
    };
  }
}

message GetWriterIdRequest {}

message GetWriterIdResponse {
  uint32 id = 1;
}

message UpdateWriterIdRequest {
  uint32 id = 1;
}

message UpdateWriterIdResponse {}

message ListDatabasesRequest {}

message ListDatabasesResponse {
  repeated string names = 1;
}

message GetDatabaseRequest {
  string name = 1;
}

message GetDatabaseResponse {
  DatabaseRules rules = 1;
}

message CreateDatabaseRequest {
  DatabaseRules rules = 1;
}

message CreateDatabaseResponse {}

message CreateDummyJobRequest {
  repeated uint64 nanos = 1;
}

message CreateDummyJobResponse {
  google.longrunning.Operation operation = 1;
}

message ListRemotesRequest {}

message ListRemotesResponse {
  repeated Remote remotes = 1;
}

// This resource represents a remote IOx server.
message Remote {
  // The writer ID associated with a remote IOx server.
  uint32 id = 1;

  // The address of the remote IOx server gRPC endpoint.
  string connection_string = 2;
}

// Updates information about a remote IOx server.
//
// If a remote for a given `id` already exists, it is updated in place.
message UpdateRemoteRequest {
  // If omitted, the remote associated with `id` will be removed.
  Remote remote = 1;

  // TODO(#917): add an optional flag to test the connection or not before adding it.
}

message UpdateRemoteResponse {}

message DeleteRemoteRequest{
  uint32 id = 1;
}

message DeleteRemoteResponse {}
