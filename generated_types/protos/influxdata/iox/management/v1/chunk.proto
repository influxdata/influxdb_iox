syntax = "proto3";
package influxdata.iox.management.v1;

import "google/protobuf/timestamp.proto";

 // Which storage system is a chunk located in?
enum ChunkStorage {
  // Not currently returned
  CHUNK_STORAGE_UNSPECIFIED = 0;

  // The chunk is still open for new writes, in the Mutable Buffer
  CHUNK_STORAGE_OPEN_MUTABLE_BUFFER = 1;

  // The chunk is no longer open for writes, in the Mutable Buffer
  CHUNK_STORAGE_CLOSED_MUTABLE_BUFFER = 2;

  // The chunk is in the Read Buffer (where it can not be mutated)
  CHUNK_STORAGE_READ_BUFFER = 3;

  // The chunk is in the Read Buffer and Object Store
  CHUNK_STORAGE_READ_BUFFER_AND_OBJECT_STORE = 4;

  // The chunk is stored in Object Storage (where it can not be mutated)
  CHUNK_STORAGE_OBJECT_STORE_ONLY = 5;
}

// `Chunk` represents part of a partition of data in a database.
// A chunk can contain one or more tables.
message Chunk {
  // The partitition key of this chunk
  string partition_key = 1;

  // The table of this chunk
  string table_name = 8;

  // The id of this chunk
  uint32 id = 2;

  // Which storage system the chunk is located in
  ChunkStorage storage = 3;

  // The total estimated size of this chunk, in bytes
  uint64 estimated_bytes = 4;

  // The number of rows in this chunk
  uint64 row_count = 9;

  // Time at which the first data was written into this chunk. Note
  // this is not the same as the timestamps on the data itself
  google.protobuf.Timestamp time_of_first_write = 5;

  // Most recent time at which data write was initiated into this
  // chunk. Note this is not the same as the timestamps on the data
  // itself
  google.protobuf.Timestamp time_of_last_write = 6;

  /// Time at which this chunk was marked as closed. Note this is not
  /// the same as the timestamps on the data itself
  google.protobuf.Timestamp time_closed = 7;

}
