###
# Dockerfile for the image used in the InfluxDB IOx CI tests
# As of October 2020, it is rebuilt each night
#
# It expects to be run with the repo checked out locally.
# for example:
#
# cd influxdb_iox
# docker build -f docker/Dockerfile.ci --build-arg RUST_VERSION=$(cat rust-toolchain) .
##

ARG RUST_VERSION
# Build actual image used for CI pipeline
FROM rust:${RUST_VERSION}-slim-buster

RUN rustup component add rustfmt clippy

# make Apt non-interactive
RUN echo 'APT::Get::Assume-Yes "true";' > /etc/apt/apt.conf.d/90ci \
  && echo 'DPkg::Options "--force-confnew";' >> /etc/apt/apt.conf.d/90ci

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update \
  && mkdir -p /usr/share/man/man1 \
  && apt-get install -y \
    git locales sudo openssh-client ca-certificates tar gzip parallel \
    unzip zip bzip2 gnupg curl make pkg-config libssl-dev \
    jq clang lld g++ \
    --no-install-recommends \
  && apt-get clean autoclean \
	&& apt-get autoremove --yes \
	&& rm -rf /var/lib/{apt,dpkg,cache,log}

ENV CURL_FLAGS="--proto =https --tlsv1.2 -sSf"

# Install bazel using the installer script to enable building of flatc in the flatbuffers check
ENV BAZEL_VERSION=4.0.0
ENV BAZEL_DOWNLOAD_BASE="https://github.com/bazelbuild/bazel/releases/download"
RUN curl ${CURL_FLAGS} https://bazel.build/bazel-release.pub.gpg | gpg --import - \
    && curl ${CURL_FLAGS} -LO ${BAZEL_DOWNLOAD_BASE}/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \
    && curl ${CURL_FLAGS} -LO ${BAZEL_DOWNLOAD_BASE}/${BAZEL_VERSION}/bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh.sig \
    && gpg --verify bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh.sig bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \
    && chmod +x bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \
    && ./bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh \
    && rm bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh bazel-${BAZEL_VERSION}-installer-linux-x86_64.sh.sig

# Install InfluxDB 2.0 OSS to enable integration tests of the influxdb2_client crate
ENV INFLUXDB2_VERSION=2.0.4
ENV INFLUXDB2_DOWNLOAD_BASE="https://dl.influxdata.com/influxdb/releases"
RUN curl ${CURL_FLAGS} https://repos.influxdata.com/influxdb2.key | gpg --import - \
    && curl ${CURL_FLAGS} -o influxdb2.tar.gz ${INFLUXDB2_DOWNLOAD_BASE}/influxdb2-${INFLUXDB2_VERSION}-linux-amd64.tar.gz \
    && curl ${CURL_FLAGS} -O ${INFLUXDB2_DOWNLOAD_BASE}/influxdb2-${INFLUXDB2_VERSION}-linux-amd64.tar.gz.asc \
    && gpg --verify influxdb2-${INFLUXDB2_VERSION}-linux-amd64.tar.gz.asc influxdb2.tar.gz \
    && tar xvzf influxdb2.tar.gz \
    && sudo cp influxdb2-${INFLUXDB2_VERSION}-linux-amd64/influxd /usr/local/bin/ \
    && rm -rf influxdb2-${INFLUXDB2_VERSION}-linux-amd64 influxdb2-${INFLUXDB2_VERSION}-linux-amd64.tar.gz.asc

# Install Docker Compose to enable integration tests that use Kafka as the write buffer
# Note: Docker does not provide signed releases at the time of this writing, see:
# https://github.com/docker/compose/issues/3480
ENV DOCKER_COMPOSE_VERSION=1.29.2
ENV DOCKER_COMPOSE_DOWNLOAD_BASE="https://github.com/docker/compose/releases/download"
RUN curl ${CURL_FLAGS} -L -O ${DOCKER_COMPOSE_DOWNLOAD_BASE}/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64 \
    && curl ${CURL_FLAGS} -L -O ${DOCKER_COMPOSE_DOWNLOAD_BASE}/${DOCKER_COMPOSE_VERSION}/docker-compose-Linux-x86_64.sha256 \
		&& sha256sum -c docker-compose-Linux-x86_64.sha256 \
		&& sudo cp docker-compose-Linux-x86_64 /usr/local/bin/docker-compose \
		&& sudo chmod +x /usr/local/bin/docker-compose \
		&& rm -rf docker-compose.sha256 \
		&& docker-compose --version

# Set timezone to UTC by default
RUN ln -sf /usr/share/zoneinfo/Etc/UTC /etc/localtime
# Use unicode
RUN locale-gen C.UTF-8 || true
ENV LANG=C.UTF-8

RUN groupadd -g 1500 rust \
  && useradd -u 1500 -g rust -s /bin/bash -m rust \
  && echo 'rust ALL=NOPASSWD: ALL' >> /etc/sudoers.d/10-rust \
  && echo 'Defaults    env_keep += "DEBIAN_FRONTEND"' >> /etc/sudoers.d/env_keep

USER rust
ENV PATH /home/rust/.local/bin:/home/rust/bin:${PATH}

CMD ["/bin/bash"]
